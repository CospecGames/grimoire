main {
    /*try {
        raise Error, "Hello World !";
    }
    rescue(err, msg) {
        print("catch: " ~ err);
    }
    ensure {
        print("finally");
    }*/
    print("main 1");
    task(vec2 a) {
        print(a.x);
        print(a.y);
        kill
        print("task 2");
    }(vec2(0.5, -2.7));
    print("main 2");
    /*
        Fonction unique pour le push/pop global des task
        Les array ne sont pas push/pop dans le parser -> à faire

    */
}


/*
Todo:
    - déclaration d'une variable locale et d'une fonction du même nom

    Suggestions:
    Système de channel comme mosaiq
    raise "Error" try catch finally
    Variables globales

    kill
*/
/*
main {
    func() func(int) foo;
    
    foo = &test;
    func(int) p = foo();
    p(5);
}

func test() func(int) {
    let a = func(int t) {
        print(t);
    };
    return a;
}

*/

/*
    Structures

    struct Foo {
        int a; //register 0 int
        float b; //register 1 float
        bool c; //register 2 bool
    }

    main {
        Foo foo;
        foo.a //parse identifier avec opérateur '.'
        //On récupère le type Foo et récupère a dans Foo
        //comme une variable locale dans une fonction
    }

*/
/*
struct vec2 {
    float x;
    float y;
}

vec2 v;//register 2 int
v.x = 0;
v.y = 0;
*/



/*To do:
    (x) vec2 a = b;
    () a = [2.0, 5.0];
    () return a;
*/